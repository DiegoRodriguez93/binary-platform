// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String    @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  firstName               String?
  lastName                String?
  balance                 Decimal   @default(5000) @db.Decimal(10, 2)
  totalProfit             Decimal   @default(0) @db.Decimal(10, 2)
  totalLoss               Decimal   @default(0) @db.Decimal(10, 2)
  totalTrades             Int       @default(0)
  winningTrades           Int       @default(0)
  losingTrades            Int       @default(0)
  isActive                Boolean   @default(true)
  role                    UserRole  @default(USER)
  authProvider            AuthProvider @default(EMAIL)
  providerId              String?
  hasReceivedWelcomeBonus Boolean   @default(false)
  lastLoginAt             DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  trades          Trade[]
  tradingSessions TradingSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trade {
  id               String      @id @default(cuid())
  userId           String
  symbol           String      @db.VarChar(20)
  direction        TradeDirection
  entryPrice       Decimal     @db.Decimal(15, 8)
  exitPrice        Decimal?    @db.Decimal(15, 8)
  amount           Decimal     @db.Decimal(10, 2)
  profitPercentage Decimal     @db.Decimal(5, 2)
  payout           Decimal?    @db.Decimal(10, 2)
  expirySeconds    Int
  expiryTime       DateTime
  status           TradeStatus @default(ACTIVE)
  result           TradeResult @default(PENDING)
  metadata         Json?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  completedAt      DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([expiryTime])
}

model TradingSession {
  id               String    @id @default(cuid())
  userId           String
  startingBalance  Decimal   @db.Decimal(10, 2)
  endingBalance    Decimal?  @db.Decimal(10, 2)
  totalTrades      Int       @default(0)
  winningTrades    Int       @default(0)
  losingTrades     Int       @default(0)
  totalProfit      Decimal   @default(0) @db.Decimal(10, 2)
  totalLoss        Decimal   @default(0) @db.Decimal(10, 2)
  maxDrawdown      Decimal   @default(0) @db.Decimal(10, 2)
  maxProfit        Decimal   @default(0) @db.Decimal(10, 2)
  tradedSymbols    String[]
  sessionMetadata  Json?
  isActive         Boolean   @default(true)
  startedAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  endedAt          DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
}

enum UserRole {
  USER
  ADMIN
}

enum AuthProvider {
  EMAIL
  GOOGLE
  TWITTER
}

enum TradeDirection {
  HIGHER
  LOWER
}

enum TradeStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TradeResult {
  WON
  LOST
  PENDING
}